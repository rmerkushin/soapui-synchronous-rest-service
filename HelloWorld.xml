<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e5d6efac-45da-402d-b5d7-89dfcd51ff58" activeEnvironment="Default" name="HelloWorld" resourceRoot="" soapui-version="5.1.3" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="dc9ac7bd-9476-4e66-a2c6-1291cd886e49" port="8080" path="/" host="localhost" name="HelloWorldService" docroot=""><con:settings/><con:properties/><con:onRequestScript>// Получаем из запроса тип метода, параметры GET запроса (если они есть), заголовок запроса и его тело
def method = mockRequest.request.getMethod();
def uri = mockRequest.request.getUri();
def request = mockRequest.requestHeaders.toString() + "\n" + mockRequest.requestContent.toString();

log.info("Incoming ${method} request: ${uri}\n${request}");</con:onRequestScript><con:afterRequestScript>// Получаем заголовок ответа, тело ответа и имя операции
def action = mockResult.getMockOperation().getName();
def headers = mockResult.getResponseHeaders().toString();
def message = mockResult.getResponseContent();

log.info("Outgoing ${action} response:\n${headers}\n${message}");</con:afterRequestScript><con:restMockAction name="hello" method="GET" resourcePath="/hello" id="d5bb1d2b-3427-46fa-b798-8178885e48ef"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="OK" id="18473518-66aa-4b00-a971-997a3f679bff" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>// Получаем имя и фамилию из параметров запроса
def name = mockRequest.request.getParameter("name");
def surname = mockRequest.request.getParameter("surname");
// Текущая дата
def date = new Date();

// Устанавливаем параметры ответа
requestContext.name = name;
requestContext.surname = surname;
requestContext.date = date;</con:script><con:responseContent>{"greeting": "Hello, ${name} ${surname}!", "date": "${date}"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>